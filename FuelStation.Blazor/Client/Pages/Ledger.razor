@page "/ledger"

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>Monthly Ledgers List</h3>



@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="AddNewMonthlyLedger" >New Monthly Ledger</button>
    <table class="table">
        <thead>
            <tr>
                <th>Year</th>
                <th>Month</th>
                <th>Income</th>
                <th>Expenses</th>
                <th>Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var monthlyLedger in ledgerlistView.MonthlyLedgers)
            {
                <tr>
                    <td>@monthlyLedger.Year</td>
                    <td>@monthlyLedger.Month</td>
                    <td>@monthlyLedger.Income</td>
                    <td>@monthlyLedger.Expenses</td>
                    <td>@monthlyLedger.Total</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteCategory(monthlyLedger)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private LedgerListViewModel ledgerlistView = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    async Task AddNewMonthlyLedger()
    {
        navigationManager.NavigateTo($"ledger/create");
    }

    async Task DeleteCategory(LedgerViewModel ledgerView)
    {
        var response = await httpClient.DeleteAsync($"Ledger/{ledgerView.ID}");
        response.EnsureSuccessStatusCode();
        await LoadItemsFromServer();
    }

    private async Task LoadItemsFromServer()
    {
        ledgerlistView.MonthlyLedgers = await httpClient.GetFromJsonAsync<List<LedgerViewModel>>("Ledger");
    }
    
}