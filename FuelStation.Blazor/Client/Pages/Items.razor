@page "/items"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>Items</h3>

<button class="btn btn-primary" @onclick="AddItem">Add Item</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else{
    <table class="table table-striped table-hover">
        <thead>
           <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Item Type</th>
                <th>Price</th>
                <th>Cost</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var item in itemList)
            {
                <tr>
                    <td>@item.Code</td>
                    <td>@item.Description</td>
                    <td>@item.ItemType</td>
                    <td>@item.Price</td>
                    <td>@item.Cost</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditItem(item)">Edit</button>     
                        <button class="btn btn-danger" @onclick="() => DeleteItem(item)">Delete</button>                                           
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    List<ItemListViewModel> itemList = new ();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        itemList = await httpClient.GetFromJsonAsync<List<ItemListViewModel>>("/item");
    }

    void AddItem()
    {
        navigationManager.NavigateTo("/items/edit");
    }

    void EditItem(ItemListViewModel itemToEdit)
    {
        navigationManager.NavigateTo($"/items/edit/{itemToEdit.ID}");
    }

    async Task DeleteItem(ItemListViewModel itemToDelete)
    {
        var response = await httpClient.DeleteAsync($"/item/{itemToDelete.ID}");
        response.EnsureSuccessStatusCode();
        await LoadItemsFromServer();
    }
}
